% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/namc_api.R
\name{namc_api}
\alias{namc_api}
\title{namc_api}
\value{
a `namc_api` class (R6 class)
}
\description{
R6 class for handling NAMC GraphQL queries
}
\examples{

api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)


## ------------------------------------------------
## Method `namc_api$configure`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$configure()

Graphql client retrieval

Configures a graphql client with proper authentication and connection settings


## ------------------------------------------------
## Method `namc_api$get_connection`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$get_connection(authenticate = TRUE)

Introspect the API schema type

Retrieves the raw schema return from introspecting the API schema type


## ------------------------------------------------
## Method `namc_api$get_api_types`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$get_api_types()

Builds a graphql schema

Builds a graphql schema structure via introspection of the API.
For all Query and Mutation graphql types the built structure stores
all associated fields and dependent sub-types. This is used for the
automated query builder as a convenience function.


## ------------------------------------------------
## Method `namc_api$build_schema`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$build_schema()
schema = api$schema

Query the API

Executes a given graphql query against the API. If errors are returned execution is stopped.



## ------------------------------------------------
## Method `namc_api$query`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
data = api$query("graphql_query", ...)

Authentication information retrieval

Retrieves the clientId and domain required for authentication from the auth
graphql endpoint.


## ------------------------------------------------
## Method `namc_api$get_auth_info`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
auth = api$get_auth_info()
clientId = auth$clientId
domain = auth$domain

Get the authentication object

Access method for the oAuth2 authentication object stored within this namc_api object.


## ------------------------------------------------
## Method `namc_api$get_auth_provider`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
auth = api$get_auth_provider()

Authentication check

Provides a logical depicting the state of the current authentication


## ------------------------------------------------
## Method `namc_api$is_authenticated`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
authenticated = api$is_authenticated()

Retrieve API endpoints

Retrieves the API endpoint names from the schema


## ------------------------------------------------
## Method `namc_api$get_endpoints`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
endpoints = api$get_endpoints()

Retrieve fields

Retrieves the fields associated with an API endpoint from the schema


## ------------------------------------------------
## Method `namc_api$get_endpoint_fields`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$get_endpoint_fields(api_endpoint = 'sites')

Retrieve arguments

Retrieves the arguments associated with an API endpoint from the schema


## ------------------------------------------------
## Method `namc_api$get_endpoint_args`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$get_endpoint_args(api_endpoint = 'sites')

Retrieve fields

Retrieves the fields associated with an API endpoint from the schema


## ------------------------------------------------
## Method `namc_api$is_endpoint`
## ------------------------------------------------


api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$get_endpoint_fields(api_endpoint = 'sites')

}
\section{Super class}{
\code{\link[NAMCr:base_class]{NAMCr::base_class}} -> \code{namc_api}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{auth}}{holds an oAuth2 object for authentication}

\item{\code{retry_conn}}{is a boolean to allow for a query reattempt given an API timeout}

\item{\code{is_configured}}{shows the configured state of the namc_api object}

\item{\code{URL}}{is the API URL endpoint}

\item{\code{top_level_key}}{is the top level key returned in the graphql JSON return for data}

\item{\code{top_level_key_error}}{is the top level key returned in the graphql JSON return for errors}

\item{\code{schema}}{is a list of endpoints and fields for the API}

\item{\code{pagination_limit}}{is the max number of records returned without pagination}

\item{\code{tpl_pagination_first}}{is the numeric first record to return}

\item{\code{tpl_pagination_offset}}{is the numeric offset of the return}

\item{\code{tpl_pagination_offset}}{is the numeric offset of the return}

\item{\code{required_kind}}{is string value of required argument kind
Configure parameters

Retrieves authentication and schema information via unauthenticated API queries}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{auth}}{holds an oAuth2 object for authentication}

\item{\code{retry_conn}}{is a boolean to allow for a query reattempt given an API timeout}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-configure}{\code{namc_api$configure()}}
\item \href{#method-get_connection}{\code{namc_api$get_connection()}}
\item \href{#method-get_api_types}{\code{namc_api$get_api_types()}}
\item \href{#method-build_schema}{\code{namc_api$build_schema()}}
\item \href{#method-query}{\code{namc_api$query()}}
\item \href{#method-get_auth_info}{\code{namc_api$get_auth_info()}}
\item \href{#method-get_auth_provider}{\code{namc_api$get_auth_provider()}}
\item \href{#method-is_authenticated}{\code{namc_api$is_authenticated()}}
\item \href{#method-get_endpoints}{\code{namc_api$get_endpoints()}}
\item \href{#method-get_endpoint_fields}{\code{namc_api$get_endpoint_fields()}}
\item \href{#method-get_endpoint_args}{\code{namc_api$get_endpoint_args()}}
\item \href{#method-is_endpoint}{\code{namc_api$is_endpoint()}}
\item \href{#method-clone}{\code{namc_api$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="NAMCr" data-topic="base_class" data-id="dump">}\href{../../NAMCr/html/base_class.html#method-dump}{\code{NAMCr::base_class$dump()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="NAMCr" data-topic="base_class" data-id="get_var">}\href{../../NAMCr/html/base_class.html#method-get_var}{\code{NAMCr::base_class$get_var()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="NAMCr" data-topic="base_class" data-id="initialize">}\href{../../NAMCr/html/base_class.html#method-initialize}{\code{NAMCr::base_class$initialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="NAMCr" data-topic="base_class" data-id="set_var">}\href{../../NAMCr/html/base_class.html#method-set_var}{\code{NAMCr::base_class$set_var()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-configure"></a>}}
\if{latex}{\out{\hypertarget{method-configure}{}}}
\subsection{Method \code{configure()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$configure(force = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{force}}{is a boolean TRUE/FALSE to force a reconfiguration}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
namc_api An R6 class.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$configure()

Graphql client retrieval

Configures a graphql client with proper authentication and connection settings

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_connection"></a>}}
\if{latex}{\out{\hypertarget{method-get_connection}{}}}
\subsection{Method \code{get_connection()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$get_connection(authenticate = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{authenticate}}{boolean A logical TRUE/FALSE representing the required authentication state.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ghql::GraphqlClient A preconfigured graphql R6 class.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$get_connection(authenticate = TRUE)

Introspect the API schema type

Retrieves the raw schema return from introspecting the API schema type

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_api_types"></a>}}
\if{latex}{\out{\hypertarget{method-get_api_types}{}}}
\subsection{Method \code{get_api_types()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$get_api_types()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
namc_api An R6 class.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$get_api_types()

Builds a graphql schema

Builds a graphql schema structure via introspection of the API.
For all Query and Mutation graphql types the built structure stores
all associated fields and dependent sub-types. This is used for the
automated query builder as a convenience function.

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-build_schema"></a>}}
\if{latex}{\out{\hypertarget{method-build_schema}{}}}
\subsection{Method \code{build_schema()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$build_schema()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
namc_api An R6 class.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$build_schema()
schema = api$schema

Query the API

Executes a given graphql query against the API. If errors are returned execution is stopped.


}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-query"></a>}}
\if{latex}{\out{\hypertarget{method-query}{}}}
\subsection{Method \code{query()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$query(query, authenticate = TRUE, name = "query")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{string Text containing a graphql query}

\item{\code{authenticate}}{boolean A logical TRUE/FALSE representing the required authentication state.}

\item{\code{name}}{string A name for the query.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
data.frame A dataframe contained the query result.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
data = api$query("graphql_query", ...)

Authentication information retrieval

Retrieves the clientId and domain required for authentication from the auth
graphql endpoint.

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_auth_info"></a>}}
\if{latex}{\out{\hypertarget{method-get_auth_info}{}}}
\subsection{Method \code{get_auth_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$get_auth_info()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list A list containing the clientId and domain required for authentication.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
auth = api$get_auth_info()
clientId = auth$clientId
domain = auth$domain

Get the authentication object

Access method for the oAuth2 authentication object stored within this namc_api object.

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_auth_provider"></a>}}
\if{latex}{\out{\hypertarget{method-get_auth_provider}{}}}
\subsection{Method \code{get_auth_provider()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$get_auth_provider()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
namc_api An R6 authentication class.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
auth = api$get_auth_provider()

Authentication check

Provides a logical depicting the state of the current authentication

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_authenticated"></a>}}
\if{latex}{\out{\hypertarget{method-is_authenticated}{}}}
\subsection{Method \code{is_authenticated()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$is_authenticated()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical A logical TRUE/FALSE.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
authenticated = api$is_authenticated()

Retrieve API endpoints

Retrieves the API endpoint names from the schema

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_endpoints"></a>}}
\if{latex}{\out{\hypertarget{method-get_endpoints}{}}}
\subsection{Method \code{get_endpoints()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$get_endpoints()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
vector A character vector.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
endpoints = api$get_endpoints()

Retrieve fields

Retrieves the fields associated with an API endpoint from the schema

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_endpoint_fields"></a>}}
\if{latex}{\out{\hypertarget{method-get_endpoint_fields}{}}}
\subsection{Method \code{get_endpoint_fields()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$get_endpoint_fields(api_endpoint)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_endpoint}}{The name of an API endpoint.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
vector A character vector of fields.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$get_endpoint_fields(api_endpoint = 'sites')

Retrieve arguments

Retrieves the arguments associated with an API endpoint from the schema

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_endpoint_args"></a>}}
\if{latex}{\out{\hypertarget{method-get_endpoint_args}{}}}
\subsection{Method \code{get_endpoint_args()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$get_endpoint_args(api_endpoint, no_paging = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_endpoint}}{The name of an API endpoint.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
vector A character vector of arguments.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$get_endpoint_args(api_endpoint = 'sites')

Retrieve fields

Retrieves the fields associated with an API endpoint from the schema

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_endpoint"></a>}}
\if{latex}{\out{\hypertarget{method-is_endpoint}{}}}
\subsection{Method \code{is_endpoint()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$is_endpoint(api_endpoint, stop_if_not = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_endpoint}}{The name of an API endpoint.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
vector A character vector.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
api_config = list(...) # namc_api public or private variables
api = namc_api$new(argList = api_config)
api$get_endpoint_fields(api_endpoint = 'sites')

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{namc_api$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
