% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_schema.R
\name{api_schema}
\alias{api_schema}
\title{api_schema}
\value{
a `namc_oauth2` class (R6 class)
}
\description{
R6 class for handling the NAMC graphql schema
}
\examples{

types = ( namc_api$new(argList=...) )$get_raw_schema()
schema = api_schema$new(types = types)

Parse introspected schema


## ------------------------------------------------
## Method `api_schema$parse_schema`
## ------------------------------------------------


types = ( namc_api$new(argList=...) )$get_raw_schema()
schema = api_schema$new(types = types)
schema$parse_schema()

Discover info on API type


## ------------------------------------------------
## Method `api_schema$get_type_info`
## ------------------------------------------------


types = ( namc_api$new(argList=...) )$get_raw_schema()
schema = api_schema$new(types = types)
schema$get_type_info()

}
\section{Super class}{
\code{\link[NAMCr:base_class]{NAMCr::base_class}} -> \code{api_schema}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-parse_schema}{\code{api_schema$parse_schema()}}
\item \href{#method-get_type_info}{\code{api_schema$get_type_info()}}
\item \href{#method-clone}{\code{api_schema$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="NAMCr" data-topic="base_class" data-id="dump">}\href{../../NAMCr/html/base_class.html#method-dump}{\code{NAMCr::base_class$dump()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="NAMCr" data-topic="base_class" data-id="get_var">}\href{../../NAMCr/html/base_class.html#method-get_var}{\code{NAMCr::base_class$get_var()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="NAMCr" data-topic="base_class" data-id="initialize">}\href{../../NAMCr/html/base_class.html#method-initialize}{\code{NAMCr::base_class$initialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="NAMCr" data-topic="base_class" data-id="set_var">}\href{../../NAMCr/html/base_class.html#method-set_var}{\code{NAMCr::base_class$set_var()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-parse_schema"></a>}}
\if{latex}{\out{\hypertarget{method-parse_schema}{}}}
\subsection{Method \code{parse_schema()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{api_schema$parse_schema()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
api_schema For method chaining
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
types = ( namc_api$new(argList=...) )$get_raw_schema()
schema = api_schema$new(types = types)
schema$parse_schema()

Discover info on API type

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_type_info"></a>}}
\if{latex}{\out{\hypertarget{method-get_type_info}{}}}
\subsection{Method \code{get_type_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{api_schema$get_type_info(type_name, recurse = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type_name}}{Name of API type to discover}

\item{\code{recurse}}{Recurse down field trees}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
list Info structure of API details
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
types = ( namc_api$new(argList=...) )$get_raw_schema()
schema = api_schema$new(types = types)
schema$get_type_info()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{api_schema$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
